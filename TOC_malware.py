import os
from tkinter import *
import tkinter.ttk as ttk
from tkinter.filedialog import askopenfilename
import subprocess
from bs4 import BeautifulSoup
import urllib
import urllib.request
import webbrowser
import re
import json

filename = ""

def AskForExec() :
	global filename
	filename = askopenfilename()
	


def strings_txt_gen() :
	global filename
	temp_string = "strings "+filename+" > " + os.path.join(os.getcwd(), "temp.txt")
	# print("1")
	print(temp_string)
	subprocess.call(temp_string, shell=True)
	
def read_strings_txt() :
	f = open(os.path.join(os.getcwd(), "temp.txt"))
	x = f.read()
	return x

def read_more_hyperlink(link):
	webbrowser.open(link, new = 2)


def check_valid_ip(ip):
    l=ip.split('.')
    for i in l:
        i=int(i)
        if i>255:
            return False
    return True

def get_list(text):
    os.remove(os.path.join(os.getcwd(),"temp.txt"))
    pattern_ip=re.compile(r'(\d{1}|\d{2}|\d{3})\.(\d{1}|\d{2}|\d{3})\.(\d{1}|\d{2}|\d{3})\.(\d{1}|\d{2}|\d{3})')
    matches_ip=pattern_ip.finditer(text)
    ip_list=[]
    for match_ip in matches_ip:
        ip=match_ip.group()
        if check_valid_ip(ip):
            ip_list.append(ip)
    pattern_dll=re.compile(r'\S+\.dll')
    matches_dll=pattern_dll.finditer(text)
    dll_list=[]
    for match_dll in matches_dll:
        dll_list.append(match_dll.group())
    return {"ip":ip_list,"dll":dll_list}


def ip_tracker(ip):
	url="http://ip-api.com/json/"+str(ip)
	response=urllib.request.urlopen(url)
	data=response.read()
	data=json.loads(data)

	output="\nCountry: "+data['country']+"\nCity: "+data['city']+"\nISP: "+data['isp']
	return output

def DLL_IP_analyser(list_of_DLL, list_of_ips) :
	n = Tk()
	n.geometry("500x300")
	global filename
     
	tmp = os.path.split(filename) 
	n.title(" Executable Analysis-" + tmp[-1])
	frame=Frame(n)
	frame.pack(fill=BOTH,expand=1)

	my_canvas=Canvas(frame)
	my_canvas.pack(fill=BOTH,expand=1,side=LEFT)

	scrollbar=ttk.Scrollbar(frame,orient=VERTICAL,command=my_canvas.yview)
	scrollbar.pack(side=RIGHT,fill=Y)

	my_canvas.configure(yscrollcommand=scrollbar.set)
	my_canvas.bind("<Configure>",lambda e: my_canvas.configure(scrollregion=my_canvas.bbox("all")))

	second_frame=Frame(my_canvas)

	my_canvas.create_window((0,0),anchor="nw",window=second_frame)
	temp_string=""
	dll_url_list=[]
	for zz in list_of_DLL:
		_=zz.lower()
		try:
			a=_.rfind(".")
			temp_string= "https://wikidll.com/microsoft/" + _[0:a] + "-" + _[a+1:len(_)]
			url=urllib.request.urlopen(temp_string)
			dll_url_list.append(temp_string)
		except:
			temp_string1 = "https://duckduckgo.com/?q="+zz+"&t=h_&ia=web"
			dll_url_list.append(temp_string1)

	for i in range(len(list_of_DLL)):
		zz=list_of_DLL[i]
		_ = zz.lower()
		try :
			url = urllib.request.urlopen(dll_url_list[i])
			content = url.read()
			soup = BeautifulSoup(content,features="lxml")
			table = soup.findAll("p")
			
			dll_related_text = table[2].text
			
			l1 =Label(second_frame, text = dll_related_text, wraplength=400, justify="center")
			l1.pack()
			b1 = Button(second_frame, text = "Read More >>", width = 10, command = lambda i=i: read_more_hyperlink(dll_url_list[i]))
			b1.pack()
		except :
			dll_related_text = zz + " Might be dll used along with third Party Executable"
			l1 = Label(second_frame, text = dll_related_text, wraplength=400, justify="center")
			l1.pack()
			b1 = Button(second_frame, text = "Read More >>", width = 10, command = lambda i=i: read_more_hyperlink(dll_url_list[i]))
			b1.pack()


	for xx in list_of_ips :
		try :
			dll_related_text = xx + " might be a Malicious IP that executable is trying to connect to..."
			dll_related_text+=ip_tracker(xx)
			l1 = Label(second_frame, text = dll_related_text, wraplength=400, justify="center")
			l1.pack()
		except:
			pass
	n.mainloop()


def AnalyseExec():
	strings_txt_gen()
	x=read_strings_txt()
	y = get_list(x)
	list_of_DLL = y["dll"]
	list_of_ips = y["ip"]
	print(list_of_DLL)
	print(list_of_ips)
	DLL_IP_analyser(list_of_DLL, list_of_ips)


# Making The GUI
m =Tk()
m.geometry("200x200") 
m.title("Windows Malware Analyser")

button1 = Button(m, text = "Upload Windows Executable", width = 30, command = AskForExec)
button1.pack()

button2 = Button(m, text="Analyse", width = 10, command =AnalyseExec)
button2.pack()

m.mainloop()

